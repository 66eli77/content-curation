var Backbone = require("backbone");
var _= require("underscore");

window.TopicNodeModel = Backbone.Model.extend({
	urlRoot:'api/topics/',
	defaults: {
        color1:"",
		color2:"",
		color3:"",
		title:"Untitled",
		description:"This is the description generated by default"
    }
});

window.TopicNodeCollection = Backbone.Collection.extend({
	model: TopicNodeModel,
	save: function() {
        Backbone.sync("update", this, {url: this.model.prototype.urlRoot()});
	},
	url:'api/topics/'
});

window.TopicTreeModel = Backbone.Model.extend({
	urlRoot: function() {
		return window.Urls["topictree-list"]();
	},
	defaults: {
		name: "Untitled Tree",
		is_published: false
	}
});

window.TopicTreeModelCollection = Backbone.Collection.extend({
	model: TopicTreeModel,
	save: function() {
        Backbone.sync("update", this, {url: this.model.prototype.urlRoot()});
	},
	url: function() {
		return window.Urls["topictree-list"]();
	}
});

window.ContentNodeModel = Backbone.Model.extend({
	urlRoot: 'api/content/',
	defaults: {
		title: "Untitled Content",
		author: "Anonymous",
		license_owner: "No license found",
		description:"This is the description generated by default"
    }
});

window.ContentNodeCollection = Backbone.Collection.extend({
	model: ContentNodeModel,
	save: function() {
        Backbone.sync("update", this, {url: this.model.prototype.urlRoot()});
	},
	url: 'api/content/'
});

window.ChannelModel = Backbone.Model.extend({
	urlRoot: function() {
		return window.Urls["channel-list"]();
	},
	defaults: {
		title: "[Untitled Content]",
		name: " ",
		editors: [],
		author: "Anonymous",
		license_owner: "No license found",
		description:" "
    },
});

window.ChannelCollection = Backbone.Collection.extend({
	model: ChannelModel,

	save: function() {
        Backbone.sync("update", this, {url: this.model.prototype.urlRoot()});
	},
	url: function() {
		return window.Urls["channel-list"]();
	}
});



module.exports = {
	TopicNodeModel: TopicNodeModel,
	TopicNodeCollection: TopicNodeCollection,
	TopicTreeModel:TopicTreeModel,
	TopicTreeModelCollection: TopicTreeModelCollection,
	ContentNodeModel: ContentNodeModel,
	ContentNodeCollection: ContentNodeCollection,
	ChannelModel: ChannelModel,
	ChannelCollection: ChannelCollection
}